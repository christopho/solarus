/**
\page lua_api_menu Menus

\tableofcontents

To display various information such as a title screen,
a dialog box,
a HUD (head-up display) or a pause screen, you can use one or several menus.

A menu is an arbitrary Lua table.
A menu belongs to a context that may be the current
\ref lua_api_map "map",
the current \ref lua_api_game "game",
the \ref lua_api_main "sol.main" table
or even another menu.
This context is the lifetime of your menu.
As long as your menu is active,
the engine will call events that are defined in your table,
i.e. callback methods like
\ref lua_api_menu_on_started "menu:on_started()"
\ref lua_api_menu_on_draw "menu:on_draw()",
\ref lua_api_menu_on_key_pressed "menu:on_key_pressed()",
etc.,
to notify your menu of something (the player pressed a key, your menu needs
to be redrawn, etc.).

If you prefer, you can also make menus without this API.
Indeed, the
\ref lua_api_map "map",
\ref lua_api_game "game" and
\ref lua_api_main "sol.main"
APIs already have everything you need,
so you can do what you want from there manually.
But menus built with the API described on this page
are just handy, because they automatically receive events
whenever they need to be notified.

\section lua_api_menu_functions Functions of sol.menu

\subsection lua_api_menu_start sol.menu.start(context, menu, [on_top])

Starts a menu in a context.

The Solarus engine will then call the appropriate events on your menu until
it is stopped.
- \c context (\ref lua_api_map "map", \ref lua_api_game "game" or table):
  The context your menu will belong to.
  Similarly to the case of \ref lua_api_timer "timers", the context determines
  the lifetime of your menu.
  The context must be one of the following four objects:
  - If you make a \ref lua_api_map "map" menu, your menu will be
    drawn above the map surface. It will be stopped when the player goes to
    another map.
    This may be useful to show head-up information local to a precise map.<br>
    Example: a counter or a mini-game that only exists on a specific map.<br>
  - If you make a \ref lua_api_game "game" menu, your menu will be
    global to all maps.
    As long as the game is running, it will persist accross map changes.<br>
    Example: the player's life counter.<br>
  - If you make a \ref lua_api_main "main" menu, your menu will be
    global to the whole program. It can exist outside a game (and it
    even persists during the game if you don't stop it).<br>
    Example: the title screen.
  - If you set the context to another menu, then its lifetime will be limited
    to this other menu.
    This allows to make nested menus.
    Example: a popup that shows some information above another menu.
  - \c menu (table): The menu to activate. It can be any table. The only thing
  that makes it special is the presence of callback functions (events) as
  described in section \ref lua_api_menu_events.
- \c on_top (boolean, optional): Whether this menu should be drawn on top
  of other existing menus of the same context or behind them.
  If \c true, the
  \ref lua_api_menu_on_draw "on_draw()" event of your menu will be the last
  to be called if there are several menus in the context.
  If \c false, it will be the first one.
  No value means \c true.

\subsection lua_api_menu_stop sol.menu.stop(menu)

Stops a menu previously activated with \ref lua_api_menu_start
"sol.menu.start()".

After this call, the Solarus engine will no longer call events on your menu.
But you can restart it later if you want.

Nothing happens is the menu was already stopped or never started.
- \c menu (table): The menu to stop.

\subsection lua_api_menu_stop_all sol.menu.stop_all(context)

Stops all menus that are currently running in a context.
- \c context (\ref lua_api_map "map", \ref lua_api_game "game" or
  \ref lua_api_main "sol.main"): The context where you want to stop
  menus.

This function is not often needed since menus are already automatically
stopped when their context is closed.

\subsection lua_api_menu_is_started sol.menu.is_started(menu)

Returns whether a table is a currently active menu.
- \c menu (table): The menu to test.
- Return value (boolean): \c true if this is an active menu.

\section lua_api_menu_events Events of a menu

Events are callback methods automatically called by the engine if you define
them.

\subsection lua_api_menu_on_started menu:on_started()

Called when your menu is started.

This event is triggered when you call \ref lua_api_menu_start
"sol.menu.start()".

\subsection lua_api_menu_on_finished menu:on_finished()

Called when your menu is stopped.

This event is triggered when you call \ref lua_api_menu_stop "sol.menu.stop()"
or when the context of your menu finishes. 

\subsection lua_api_menu_on_update menu:on_update()

Called at each cycle of the main loop while your menu is active.

Menus of are updated in the following order:
-# \ref lua_api_map "Map" menus (only during a game).
-# \ref lua_api_game "Game" menus (only during a game).
-# \ref lua_api_main "Main" menus (the more general ones).

When several menus exist in the same context, they are updated from the back
one to the front one.
You can control this order thanks to the
\c on_top parameter of
\ref lua_api_menu_start "menu:start()" when you start a menu.

\remark As this function is called at each cycle, it is recommended to use other
solutions when possible, like \ref lua_api_timer "timers" and other events.

\subsection lua_api_menu_on_draw menu:on_draw(dst_surface)

Called when your menu has to be redrawn.

Use this event to draw your menu.
- \c dst_surface (\ref lua_api_surface "surface"): The surface where you
  should draw your menu.

Menus of are drawn in the following order:
-# \ref lua_api_map "Map" menus (only during a game).
-# \ref lua_api_game "Game" menus (only during a game).
-# \ref lua_api_main "Main" menus (the more general ones).

When several menus exist in the same context, they are updated from the back
one to the front one.
You can control this order thanks to the
\c on_top parameter of
\ref lua_api_menu_start "menu:start()" when you start a menu.

\subsection lua_api_menu_on_key_pressed menu:on_key_pressed(key, modifiers)

Called when the user presses a keyboard key while your menu is active.
- \c key (string): Name of the raw key that was pressed.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

For all keyboard and joypad events, most recent menus are notified
first. For example, if some dialog box is shown during the pause menu and
appears above that pause menu, it will naturally receive keyboard and joypad
events first.

When a menu handles the event, it should return \c true to make the event stop
being propagated. Menus (and other objects) below it won't be not notified.
On the contrary, if no script has handled the event, then the engine can handle
it with a built-in behavior.

\remark This event indicates the raw key pressed. If you want the
corresponding character instead (if any), see
\ref lua_api_menu_on_character_pressed "menu:on_character_pressed()".

\subsection lua_api_menu_on_key_released menu:on_key_released(key, modifiers)

Called when the user releases a keyboard key while your menu is active.
Menus on top are notified first.
- \c key (string): Name of the raw key that was released.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

\subsection lua_api_menu_on_character_pressed menu:on_character_pressed(character)

Called when the user enters text
while your menu is active.
Menus on top are notified first.
- \c character (string): A utf-8 string representing the character that was
  pressed.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus).

\remark When a character key is pressed, two events are called:
\ref lua_api_menu_on_key_pressed "menu:on_key_pressed()"
(indicating the raw key)
and \ref lua_api_menu_on_character_pressed "menu:on_character_pressed()"
(indicating the utf-8 character).
If your menu needs to input text from the user,
\ref lua_api_menu_on_character_pressed "menu:on_character_pressed()"
is what you want because it
considers the keyboard's layout and gives you international utf-8
strings.

\subsection lua_api_menu_on_joypad_button_pressed menu:on_joypad_button_pressed(button)

Called when the user presses a joypad button while your menu is active.
Menus on top are notified first.
- \c button (number): Index of the button that was pressed.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

\subsection lua_api_menu_on_joypad_button_released menu:on_joypad_button_released(button)

Called when the user releases a joypad button while your menu is active.
Menus on top are notified first.
- \c button (number): Index of the button that was released.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

\subsection lua_api_menu_on_joypad_axis_moved menu:on_joypad_axis_moved(axis, state)

Called when the user moves a joypad axis while your menu is active.
Menus on top are notified first.
- \c axis (number): Index of the axis that was moved. Usually, \c 0 is an
  horizontal axis and \c 1 is a vertical axis.
- \c state (number): The new state of the axis that was moved. \c -1 means
  left or up, \c 0 means centered and \c 1 means right or down.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

\subsection lua_api_menu_on_joypad_hat_moved menu:on_joypad_hat_moved(hat, direction8)

Called when the user moves a joypad hat while your menu is active.
Menus on top are notified first.
- \c hat (number): Index of the hat that was moved.
- \c direction8 (number): The new direction of the hat. \c -1 means that the
  hat is centered. \c 0 to \c 7 indicates that the hat is in one of the eight
  main directions.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus or the built-in \ref lua_api_game_intro_commands
  "game commands").

\subsection lua_api_menu_on_command_pressed menu:on_command_pressed(command)

Called during a game when the player presses a
\ref lua_api_game_intro_commands "game command"
(a keyboard key or a joypad action mapped to a built-in game behavior).
You can use this event to override the normal built-in behavior of the game
command.
Menus on top are notified first.
- \c command (string): Name of the built-in game command that was pressed (see
  the \ref lua_api_game_intro_commands "game API" for the list of existing
  game commands).
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (you are overriding the built-in behavior of pressing this game command).

\remark As the notion of game commands only exist during a game,
  this event is only called for game menus and map menus.

\remark This event is not triggered if you already handled the underlying
  low-level keyboard or joypad event.

\subsection lua_api_menu_on_command_released menu:on_command_released(command)

Called during a game when the player released a game command
(a keyboard key or a joypad action mapped to a built-in game behavior).
You can use this event to override the normal built-in behavior of the game
command.
Menus on top are notified first.
- \c command (string): Name of the built-in game command that was released (see
  the \ref lua_api_game_intro_commands "game API" for the list of existing
  game commands).
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (you are overriding the built-in behavior of releasing this game command).

\remark As the notion of game commands only exist during a game,
  this event is only called for game menus and map menus.

\remark This event is not triggered if you already handled the underlying
  low-level keyboard or joypad event.

\subsection lua_api_menu_on_mouse_pressed menu:on_mouse_pressed(button, x, y)

Called when the user presses a mouse button inside the viewport
while your menu is active.
Menus on top are notified first.
- \c button (string): Name of the mouse button that was pressed. 
  Possible values are \c "left", \c "middle", \c "right", \c "x1" and \c "x2".
- \c x (integer): The x position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates,
  relative to the viewport.
- \c y (integer): The y position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates, 
  relative to the viewport.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like other menus").

*/

